Instalación:
	1. Instalar las dependencias necesarias
		# apt-get install ruby ruby-dev ruby2.1 ruby2.1-dev nodejs

	2. Instalar Jekyll 3.0.1 desde "RubyGems"
		# gem install jekyll || gem2.1 install jekyll

Ejecución del servidor de Jekyll:
	1. Ir a la carpeta del sitio
		$ cd <carpetaSitio>

	2. Iniciarlizar el servidor
		$ jekyll serve

		Notas:
			· Para solo construir el sitio se debe usar el comando "jekyll build"
			· Jekyll puede crear un sitio base con el comando "jekyll new .", pero la carpeta debe estar vacía o contener solo archivos/carpetas ocultos.

Estructura de un sitio con Jekyll:
	.
	├─ _data/
	├─ _drafts/
	├─ _includes/
	├─ _layouts/
	├─ _posts/
	├─ _site/
	├─ index.html
	└─ _config.yml

	· _data/: Almacena datos útiles para el sitio, podría decirse que es una pequeña base de datos estática.

	· _drafts/: Contiene los posts que aún están en construcción. Para que se muestren hay que iniciar el servidor con la opción "--drafts"

	· _includes/: Contiene segmentos de código que tal vez sean usados en multiples archivos.

	· _layouts/: Contiene todas las plantillas con las que se mostrarán las páginas del sitio.

	· _posts/: Contiene los posts listos para publicar, sus nombres deben cumplir con el formato "<Año>-<Mes>-<Día>-<Titulo-sin-espacios>.<Extensión>".

	· _site/: Es generada automaticamente, contiene el sitio despues de haber sido procesado por Jekyll.

	· index.html: Es la página príncipal del sitio.

	· _config.yml: Es el archivo con el que se establecen las configuraciones globales y de ejecución del servidor.

Variables de Jekyll:
	· content: Almacena el contenido de un archivo, es usada por las plantillas.

	· layout: Objeto que almacena como propiedades todas la variables definidas en el YAML Front Matter de la plantilla.

	· page: Objeto que almacena como propiedades todas la variables definidas en el YAML Front Matter.
		· categories: Lista de categorías asignadas a la página.

		· category: Categoría asignada a la página.

		· content: Contenido de la página.

		· date: Fecha de creación de la página, si no está definida toma el valor del nombre del archivo. Debe cumplir con la estructura "YYYY-MM-DD HH:mm:SS".

		· description: Resumen de lo que se trata en la página, es recomendable que contenga 160 caracteres o menos.

		· excerpt: Obtiene la parte del contenido que está antes del separador definido (`excerpt_separator`).

		· excerpt_separator: Separador usado por la variable `excerpt` (Valor predefinido: `"\n\n"`).

		· id: Identificador de la página.

		· layout: Plantilla que debe usar Jekyll en la contrucción de la página.

		· next: Referencia al siguiente post en la variable "site.posts", si no existe retorna "nil".

		· title: Título de la página.

		· path: Ruta al archivo fuente de la página.

		· permalink: Establece el formato de la ruta a la página, ej: `/:categories/:title.html`. Tiene los siguientes valores dinámicos:
			· :year: Año.

			· :month: Mes.

			· :i_month: Mes sin ceros.

			· :day: Día.

			· :i_day: Día sin ceros.

			· :hour: Hora.

			· :minute: Minuto.

			· :second: Segundo.

			· :title: Nombre.

			· :categories: Categorías, la variable "page.category" tiene mayor precedencia que "page.categories" para la generación del nombre.

		· previous: Referencia al post anterior en la variable "site.posts", si no existe retorna "nil".

		· published: Determina si la página será publicada en el sitio (Valor predefinido: "true").

		· tags: Lista de etiquetas asignadas a la página.

		· url: Muestra el "permalink" generado.

	· paginator: Objeto especial que se utiliza para la creación de la paginación.
		· next_page: Número de la siguiente página, si no existe retorna "nil".

		· next_page_path: Ruta a la siguiente página.

		· page: Número de la página actual.

		· per_page: Cantidad de posts por páginas definido ("site.paginate").

		· posts: Lista de posts de la página actual.

		· previous_page: Número de la página anterior, si no existe retorna "nil".

		· previous_page_path: Ruta a la página anterior.

		· total_pages: Total de páginas.

		· total_posts: Total de posts en todas la páginas.

	· site: Objeto que almacena como propiedades todas la variables definidas en el archivo "_config.yml".
		· categories: Lista de categorías.

		· categories.<categoría>: Lista de posts con la categoría especificada.

		· data: Lista de los archivos en "_data/".

		· defaults: Permite preestablecer propiedades al YAML Front Matter.
			· scope: Contiene las rutas y filtros.
				· path: Determina la ruta de los archivos a procesar, una cadena vacía equivale a toda la carpeta.

				· type: Es opcional, filtra los archivos de la ruta especificada, existen tres tipos predefinidos por Jekyll: "posts", "drafts" y "pages".

			· values: Contiene las variables a definirse.

		· html_files: Lista de archivos con extensión ".html" que no han sido procesados por Jekyll, los elementos obtenidos tienen las propiedades de "site.static_files".

		· html_pages: Lista de todos los archivos con extensión ".html" que han sido procesados por Jekyll, los elementos obtenidos tienen las propiedades de "page".

		· pages: Lista de todos los archivos web (".html", ".css", ".xml", etc...) que han sido procesados por Jekyll, los elementos obtenidos tienen las propiedades de "page".

		· paginate: Numero máximo de posts para la paginación.

		· paginate_path: Ruta para la creación de la paginación, si existe un archivo "index.html" en la ruta especificada y posee YAML Front Matter, será usado como plantilla para la paginación. Tiene el valor dinámico ":num" que genera consecutivamente el número de la página.

		· posts: Lista de todos los posts, los elementos obtenidos tienen las propiedades de "page".

		· static_files: Lista de los archivos estáticos del sitio.
			· extname: Extension del archivo.

			· modified_time: Fecha de modificación.

			· path: Ruta relativa al archivo.

		· tags: Lista de etiquetas.

		· tags.<Etiqueta>: Lista de posts con la etiqueta especificada.

		· site.url: Dirección principal, ej: `"http://ntrrg.github.io/"`.

	Aunque las siguientes variables pertenecen a "site", no tienen que ver con el contenido del sitio sino que alteran el funcionamiento del servidor o tienen información de él.

	· baseurl: Ruta en la que trabajará Jekyll, no es necesaria si estará en la ruta principal. Ej: "/blog".

	· encoding: Codificación de los archivos. Ej: "utf-8".

	· exclude: Evita que Jekyll use los archivos y carpetas especificados en un arreglo para la construcción del sitio, soporta patrones GLOB.

	· host: Nombre del sitio. Ej: "localhost".

	· include: Forza Jekyll a usar los archivos y carpetas especificados en un arreglo para la construcción del sitio, soporta patrones GLOB. Los archivos ocultos son excluidos por defecto.

	· port: Puerto del servidor.

	· time: Fecha y hora de la última vez que se inicio el servidor.

	· timezone: Zona horaria para el sitio. Ej: "America/Caracas".

Utilidades para crear un sitio:
	· Paginación:
		Para activar la paginación es necesario agregar las siguientes variables al "_config.yml":
			gems: ["jekyll-template"]
			paginate: <Numero de posts por página>
			paginate_path: "<Carpeta donde se guardará la paginación>"

			gems: ["jekyll-template"]
			paginate: 8  # 8 posts en cada página
			paginate_path: "page/:num"  # Si existen 20 posts, se crearán "page/2" que mostrará los posts del 9 al 16 y "page/3" que mostrará del 17 al 20.

			El archivo de paginación es generado usando como base el archivo "index.html" de la raíz del sitio en caso de que no exista un "index.html" en la ruta de las páginas ("page/" del ejemplo) con el YAML Front Matter.

	· Resaltar sintaxis de código fuente:
		{% highlight <Lenguaje> %}
			Codigo fuente
		{% endhighlight %}

		Es posible mostrar el número de linea con el parametro "linenos".
			{% highlight <Lenguaje> linenos %}

	· Uso de "_data":
		Si existe un archivo "anime.yml" en "_data" y su contenido es:
			-
			  name: One Piece
			  status: En emisión
			  genere:
			    - Aventura
			    - Comedia
			    - Shōnen

			-
			  name: Rurouni Kenshin
			  status: Finalizado
			  genere:
			    - Comedia
			    - Romance
			    - Shōnen

		Sería posible acceder a la lista de Animes con:
			<ul>

			{% for anime in site.data.anime %}

				<li>{{ anime.name }}</li>

			{% endfor %}

			</ul>

		En caso de que "anime.yml" contenga objetos en lugar de un arreglo:
			onepiece:
			  name: One Piece
			  status: En emisión
			  genere:
			    - Aventura
			    - Comedia
			    - Shōnen

			rurounikenshin:
			  name: Rurouni Kenshin
			  status: Finalizado
			  genere:
			    - Comedia
			    - Romance
			    - Shōnen

		Cada repetición, el "for" obtendrá un arreglo compuesto por dos elementos, el nombre del objeto ([0]) y su contenido ([1]):
			{% for obj in site.data.anime %}
				{% assign anime = obj[1] %}

				<li>{{ anime.name }} ({{ obj[0] }})</li>

			{% endfor %}

		Cuando se trabaja con colecciones, el "for" obtendrá el objeto y además agregará una propiedad ".label" que contendrá el nombre del objeto:
			<ul>

			{% for anome in site.data.anime %}

				<li>{{ anime.name }} ({{ anime.label }})</li>

			{% endfor %}

			</ul>

	· Algunos filtros y etiquetas Liquid de Jekyll:
		Arreglo/Objeto a JSON:
			<variable> | jsonify

		Cadena a CGI:
			<variable> | cgi_escape

		Cadena a enlace:
			<variable> | slugify

		Cantidad de palabras una cadena:
			<variable> | number_of_words

		Fecha a Formato XML:
			<variable> | date_to_xmlschema

		Filtrar objetos:
			<variable> | where:"<propiedad>", "<valor>"

		Importar Gists:
			{% gist <gist> %}

			{% gist ntrrg/a8dd010e2f5ad28d9ce1 %}

		Markdown a HTML:
			<variable> | markdownify

		Obtener el "permalink" de un post
			{% post_url <Archivo post sin extensión> %}

	· Importar archivos:
		Se debe usar la etiqueta de invocación de Liquid:
			{% include <archivo> %}

			Nota: <archivo> debe estar guardado en "_includes".

		Se pueden enviar variables al archivo incluido
			{% include <archivo> <variable>=<valor> %}

		Y en el arhivo incluido se debe usar con el prefijo "include."
			{{ include.variable }}

Liquid
	Variables:
		Cadena
			{% assign <variable> = "Cadena" %}

		Numérica
			{% assign <variable> = 1 %}

		Booleana
			{% assign <variable> = true %}
			{% assign <variable> = false %}

		nil, equivalente a Null

		blank, equivalente a cadena vacía

		Arreglos
			{% assign <arreglo> = "<valor1>, <valor2>, <valor3>" | split: ', ' %}

	Operadores:
		Comparación:
			==: Igual que.
			!=: Diferente de.
			>: Mayor que.
			<: Menor que.
			>=: Mayor o igual que.
			<=: Menor o igual que.
			contains: Verifica la existencia de una cadena en otra cadena o un arreglo de cadenas.

		Lógicos:
			or: O lógico.
			and Y lógico.

	Etiquetas
		Condición
			if:
				{% if <variable> <operador> '<valor>' %}
					<Sentencias>

				{% elsif <variable> <operador> '<Otro valor>' %}
					<Sentencias>

				{% else %}
					<Sentencias>

				{% endif %}

			unless (Negación):
				{% unless <variable> <operador> '<valor>' %}
					<Sentencias>
				{% endunless %}

			switch:
				{% case <variable> %}
					{% when '<valor>' %}
						<Sentencias>

					{% when '<Otro valor>' %}
						<Sentencias>

					{% else %}
						<Sentencias>
				{% endcase %}

		Repetición
			for:
				{% for <variable> in <arreglo> %}
					<Sentencias>
				{% endfor %}

				Parametros:
					limit: Indica el maximo de veces que se repetirá.
						{% for <variable> in <arreglo> limit:<número> %}

					offset: Indica el indice del arreglo en el que se empezará
						{% for <variable> in <arreglo> offset:<índice> %}

					range: Permite crear rangos para las iteraciones.
						{% for <variable> in (<valorInicial>..<valorFinal>) %}

					reversed: Permite navegar de manera reversa un arreglo.
						{% for <variable> in <arreglo> reversed %}

				Puede usarse "break" y "continue" como en un leguaje de programación
					{% break %}
					{% continue %}

				Nota: for solo puede realizar 50 iteraciones, será necesario usar paginación para mostrar mas resultados.

			cycle:
				Aunque no es una estructura de repetición, puede definirse como un conjunto de cadenas que cada vez que sean instanciadas mostrará una de ellas sucesivamente.
					{% cycle 'Primera cadena', 'Segunda cadena' %}  # Mostrará "Primera cadena"
					{% cycle 'Primera cadena', 'Segunda cadena' %}  # Mostrará "Segunda cadena"
					{% cycle 'Primera cadena', 'Segunda cadena' %}  # Mostrará "Primera cadena" nuevamente

					{% for i in (1..3) %}
						{% cycle 'Primera cadena', 'Segunda cadena' %}  # Equivalente al ejemplo anterior
					{% endfor %}

				Es posible definir diferentes ciclos con las mismas cadenas por medio del parametro "group".
					{% cycle 'Grupo1': Primera cadena', 'Segunda cadena' %}  # Mostrará "Primera cadena"
					{% cycle 'Grupo2': Primera cadena', 'Segunda cadena' %}  # Mostrará "Primera cadena"

	Filtros:
		Permiten alterar las salidas

Referencias:
http://pages.github.com
http://jekyllrb.com/docs/home/
https://docs.shopify.com/themes/liquid-documentation/basics