.. site-description: Es un lenguaje de c√≥digo abierto, minimalista y de alto rendimiento; su fuerte es la concurrencia.

.. role:: emoji

.. role:: go(code)
    :language: go

=================
[WIP] Golang (Go)
=================

-------
v1.10.1
-------

:Author: Miguel Angel Rivera Notararigo
:Contact: `@ntrrg </es/autores/ntrrg/>`_
:Date: 2018-04-01T22:48:00-04:00
:Category: tecnologia
:Tags: backend; desarrollo; golang;

.. image:: images/index.png
    :class: article-image
    :alt: Golang gopher

__ https://golang.org/LICENSE

Fue dise√±ado en el a√±o 2007 por Ken Thompson, Rob Pike y Robert Griesemer en
Google. Es de c√≥digo abierto y es ditribuido bajo una licencia `BSD-style`__.
Algunas de sus caracter√≠sticas son:

__ https://es.wikipedia.org/wiki/Recolector_de_basura
__ `Utilidades excluidas`_

* Imperativo, los programas se escriben como una serie de instrucciones que la
  computadora debe seguir para resolver un problema (si leyendo esto piensan
  ¬´*¬øY no es as√≠ como se escriben todos los programas?* :emoji:`üòí`¬ª, la
  respuesta es no, existen otros paradigmas de programaci√≥n que trabajan con
  enfoques muy diferentes a este).

* Compilado, todo el c√≥digo escrito es traducido a lenguaje m√°quina antes de
  poder ejecutarse.

* Tipado est√°tico, una vez que se define el tipo de una variable, este no puede
  ser modificado.

* Fuertemente tipado, no permite realizar operaciones entre datos de diferente
  tipo, deben hacerse cambios de tipo expl√≠citamente.

* No es necesario liberar manualmente la memoria asignada, usa un GC__ que se
  encarga de esto, lo que da facilidades en el manejo de memoria.

* Concurrencia y paralelismo de manera nativa (por medio de palabras reservadas
  y operadores, tambi√©n tiene algunas bibliotecas que permiten aplicar t√©cnicas
  de m√°s bajo nivel).

* Minimalista. La mayor√≠a de las utilidades que faltan en el lenguaje, fueron
  `excluidas intencionalmente`__.

.. contents:: Tabla de contenido

Instalaci√≥n
===========

__ `Desde el c√≥digo fuente`_

La forma m√°s r√°pida de instalar (si se tiene buena conexi√≥n a internet
:emoji:`üòÖ`) es descargando la versi√≥n binaria, que es la que explico aqu√≠, si
lo quieren compilar desde el c√≥digo fuente, en `esta secci√≥n`__ explico el
procedimiento para hacerlo.

#. Descargar el paquete con los binarios

   .. code:: shell-session

       $ wget https://dl.google.com/go/go1.10.1.linux-amd64.tar.gz

#. Verificar que se haya descargado correctamente (la salida del comando
   ``md5sum`` debe ser igual en cualquier computadora)

   .. code:: shell-session

       $ md5sum go1.10.1.linux-amd64.tar.gz

   .. code:: shell-session

       ad5d557f69f8cb6a6a7773eb374a24c9  go1.10.1.linux-amd64.tar.gz

#. Descomprimirlo en ``/usr/local``

   .. code:: shell-session

       # tar -xvf go1.10.1.linux-amd64.tar.gz -C /usr/local

#. Agregar los binarios a la lista de comandos del sistema

   .. code:: shell-session

       # ln -s /usr/local/go/bin/* /usr/bin/

#. Verificar que se haya instalado correctamente

   .. code:: shell-session

       $ go version

   .. code:: shell-session

       go version go1.10.1 linux/amd64

.. admonition:: Nota

    Es posible instalar Go en una ruta personalizada e incluso sin permisos de
    super usuario, los pasos ser√≠an muy parecidos a los anteriores, solo que
    hay que cambiar las rutas y opcionalmente, si se quieren usar algunas
    utilidades, como ver la documentaci√≥n de los paquetes, se debe definir la
    variable de entorno ``GOROOT``, que le dice al sistema donde est√°
    instalado Go.

    .. code:: shell-session

        $ export GOROOT="${HOME}/.local/go"

    **Zsh:**

    .. code:: shell-session

        $ echo "export GOROOT=\"${GOROOT}\"" >> ~/.zshenv

    **Bash:**

    .. code:: shell-session

        $ echo "export GOROOT=\"${GOROOT}\"" >> ~/.profile

Desde el c√≥digo fuente
----------------------

#. Descargar el c√≥digo fuente

   .. code:: shell-session

       $ wget https://dl.google.com/go/go1.10.1.src.tar.gz

#. Verificar que se haya descargado correctamente (la salida del comando
   ``md5sum`` debe ser igual en cualquier computadora)

   .. code:: shell-session

       $ md5sum go1.10.1.src.tar.gz
       d55e8b2c6272ab1abf5e4e6cdaaca680  go1.10.1.src.tar.gz

#. Todav√≠a no se hacer el resto :emoji:`üòÖ` por ahora usen los binarios

Herramientas
============

Para empezar a programar solo hacen falta dos cosas:

__ Instalaci√≥n_

* El compilador (las instrucciones para instalarlo est√°n arriba__).
* Un editor de texto.

Aunque ya con esto es m√°s que suficiente para desarrollar tranquilamente,
existen muchas herramientas que ayudan a mejorar la velocidad de trabajo e
integran bastantes utilidades en el flujo de trabajo sin mucha fricci√≥n. Las
que yo uso son:

__ https://play.golang.org/
__ https://chrome.google.com/webstore/detail/odfhkelcmblecfdnboahphiafolojmpl

* Gophertool, que es una extensi√≥n muy sencilla de Chrome y viene con la
  instalaci√≥n de Go, espec√≠ficamente en la carpeta ``misc/chrome/gophertool``.
  Fue creada para ayudar a los programadores del lenguaje con algunos accesos
  r√°pidos, pero para simple mortales como yo, sirve para buscar en la
  documentaci√≥n de la biblioteca est√°ndar.

* El `Playground oficial`__ que permite probar c√≥digo directamente en el
  navegador y `Better Go Playground`__, que es una extensi√≥n de Chrome que lo
  hace m√°s amigable.

Archivos Go
===========

Todos los archivos escritos en Go forman parte de un paquete, que es la unidad
de distribuci√≥n de c√≥digo en este lenguaje, por esto, todos los archivos deben
iniciar con una l√≠nea que contenga :go:`package NOMBRE`, donde ``NOMBRE`` es un
valor asignado por el desarrollador y es el identificador con el que otros
podr√°n utilizarlo dentro de sus programas (por ahora se ve como una cosa rara,
pero en la secci√≥n de Modularizaci√≥n_ se puede ver lo √∫til que es crear
bibliotecas). Cuando se pretende desarrollar alg√∫n comando o alguna aplicaci√≥n
se usa :go:`package main`, ``main`` es un nombre especial que le dice al
compilador que la intenci√≥n del archivo no es servir como biblioteca, sino como
un ejecutable.

.. code:: go
    :number-lines:

    package main -> Nombre del paquete
    ...

Despu√©s de una l√≠nea en blanco, se hace el llamado a los paquetes que se usar√°n
en el programa (si hace falta ¬øno?, no es que sea obligatorio usar al menos un
paquete :emoji:`üòÇ`), por ejemplo, si se quiere escribir algo en pantalla se
debe importar el paquete ``fmt``.

.. code:: go
    :number-lines: 2

    ...
    import "fmt" -> Paquetes importados
    ...

Luego se escriben todas las instrucciones que el programador quiera darle a la
computadora, en el caso de usar ``main``, se debe crear un bloque de c√≥digo
identificado con el mismo nombre para comunicarle al compilador cu√°l es el
c√≥digo que debe ser invocado al usar el ejecutable.

.. code:: go
    :number-lines: 4

    ...
    func main() { ‚îê
      ...         ‚îÇ-> Bloque de c√≥digo
    }             ‚îò

A estos bloques se les llaman funciones_ (por eso el :go:`func` al inicio, que
viene de ¬´*function*¬ª) y su principal utilidad es modularizar y reutilizar el
c√≥digo, muy parecidas a los paquetes, solo que a una escala menor; tienen
cierta sintaxis espec√≠fica, pero por ahora basta con saber que:

#. Se usa la palabra reservada :go:`func` para iniciar la declaraci√≥n.

#. Separado por un espacio en blanco se escribe el nombre de la funci√≥n
   (``main`` en este caso) y unos par√©ntesis (``()``).

#. Se escribe el c√≥digo a ejecutar dentro de llaves (``{}``).

__ https://es.wikipedia.org/wiki/Hola_mundo

----

En resumen, todo archivo escrito en Go tendr√° la siguiente estructura:

#. Nombre del paquete.
#. Llamados a paquetes externos (opcional).
#. Cuerpo del programa.

Siguiendo estas reglas, el programa m√°s famoso (`hello, world`__) escrito en Go
se ver√≠a algo as√≠:

``hola_mundo.go``:

.. include:: go-learning/1-archivos-go/hola_mundo.go
    :code: go
    :number-lines:
    :tab-width: 2

Comentarios
===========

Los comentarios son texto ignorado por el compilador, su funci√≥n principal es
documentar ciertas secciones de c√≥digo que sean un poco dif√≠ciles de entender a
simple vista, pero en muchas ocasiones tambi√©n son usados para ocultar c√≥digo
de los ojos del compilador y ver como se comporta el programa. Existen dos
tipos de comentarios:

* De l√≠nea

.. code:: go
    :number-lines:

    fmt.Println("hola, mundo") // As√≠ se escribe un comentario de l√≠nea
    // Las sentencias comentadas no son procesadas por el compilador
    // fmt.Println("chao, mundo")

* Generales

.. code:: go
    :number-lines:

    /* As√≠ se escribe un comentario general
    func main() {
        fmt.Println("hola, mundo")
    }

    Este programa no hace nada..
    */

Tipos de datos
==============

.. Numerics
.. Strings
.. Booleans
.. Casting

..     .3. Tipos de variable
..         .1. Simples
..             .1. Num√©ricos
..             .2. L√≥gicos
..         .2. Compuestos
..             .1. Cadenas
..             .2. Listas
..             .3. Tuplas
..             .4. Conjuntos
..             .5. Diccionarios
..     .4. Cambio de tipo

https://tour.golang.org/basics/11
https://tour.golang.org/basics/13

Estructuras:

https://tour.golang.org/moretypes/2
https://tour.golang.org/moretypes/3

Arreglos:

https://tour.golang.org/moretypes/6

Porciones:

https://tour.golang.org/moretypes/7
https://tour.golang.org/moretypes/8
https://tour.golang.org/moretypes/9
https://tour.golang.org/moretypes/10
https://tour.golang.org/moretypes/11
https://tour.golang.org/moretypes/12
https://tour.golang.org/moretypes/13
https://tour.golang.org/moretypes/14
https://tour.golang.org/moretypes/15
https://blog.golang.org/go-slices-usage-and-internals

Mapas:

https://tour.golang.org/moretypes/19
https://tour.golang.org/moretypes/20
https://tour.golang.org/moretypes/21
https://tour.golang.org/moretypes/22

Punteros:

https://tour.golang.org/moretypes/1
https://tour.golang.org/moretypes/4
https://tour.golang.org/moretypes/5

Operadores
==========

.. Arithmetic
.. Logical Operators
.. Relational Operators

.. 4. Operadores
..     .1. Asignaci√≥n
..     .2. Aritmeticos
..     .3. Asignaci√≥n aumentada
..     .4. Compraci√≥n
..     .5. L√≥gicos
..     .6. Binarios

Constantes
==========

https://tour.golang.org/basics/15
https://tour.golang.org/basics/16

Variables
=========

.. 3. Variables
..     .1. Declaraci√≥n
..     .2. Eliminaci√≥n

https://blog.golang.org/gos-declaration-syntax
https://tour.golang.org/basics/8
https://tour.golang.org/basics/9
https://tour.golang.org/basics/10
https://tour.golang.org/basics/12
https://tour.golang.org/basics/14

.. code:: go

    var x int = 1

Condiciones
===========

If

https://tour.golang.org/flowcontrol/5
https://tour.golang.org/flowcontrol/6
https://tour.golang.org/flowcontrol/7

Switch

https://tour.golang.org/flowcontrol/9
https://tour.golang.org/flowcontrol/10
https://tour.golang.org/flowcontrol/11

Repeticiones
============

https://tour.golang.org/flowcontrol/1
https://tour.golang.org/flowcontrol/2
https://tour.golang.org/flowcontrol/3
https://tour.golang.org/flowcontrol/4

Funciones
=========

.. Functions
.. Recursion
.. Closures
.. Defer
.. Recover

.. 10. Funciones
..     .1. Declaraci√≥n
..     .2. Uso
..     .3. Funciones de orden superior
..         .1. Funciones an√≥nimas
..         .2. Decoradores
..     .4. Funciones predefinidas de Python
..         .1. del
..         .2. filter
..         .3. globals
..         .4. len
..         .5. locals
..         .6. map
..         .7. max
..         .8. min
..         .9. next
..         .10. range
..         .11. zip

https://tour.golang.org/basics/4
https://tour.golang.org/basics/5
https://tour.golang.org/basics/6
https://tour.golang.org/basics/7
https://tour.golang.org/flowcontrol/12
https://tour.golang.org/flowcontrol/13
https://blog.golang.org/defer-panic-and-recover
https://tour.golang.org/moretypes/24
https://tour.golang.org/moretypes/25
https://tour.golang.org/methods/5

https://golang.org/doc/codewalk/functions/

Funciones predefinidas
----------------------

``make``

M√©todos
=======

https://tour.golang.org/methods/1
https://tour.golang.org/methods/2
https://tour.golang.org/methods/3
https://tour.golang.org/methods/4
https://tour.golang.org/methods/6
https://tour.golang.org/methods/7
https://tour.golang.org/methods/8

Interfaces
==========

.. 11. Clases
..     .1. Declaraci√≥n
..         .1. Herencia
..         .2. Polimorfismo
..         .3. M√©todos especiales
..         .4. Encapsulamiento
..     .2. Uso
..     .3. M√©todos predefinidos de Python
..         .1. Cadenas
..         .2. Diccionarios
..         .3. Listas
..         .4. Tuplas
..         .5. Conjuntos

https://tour.golang.org/methods/9
https://tour.golang.org/methods/10
https://tour.golang.org/methods/11
https://tour.golang.org/methods/12
https://tour.golang.org/methods/13
https://tour.golang.org/methods/14
https://tour.golang.org/methods/15
https://tour.golang.org/methods/16

Interfaces predefinidas
-----------------------

``error``

https://tour.golang.org/methods/19

Concurrencia
============

https://tour.golang.org/concurrency/1
https://tour.golang.org/concurrency/9

https://vimeo.com/49718712
https://talks.golang.org/2012/concurrency.slide
https://www.youtube.com/watch?v=f6kdp27TYZs
https://www.youtube.com/watch?v=QDDwwePbDtw

https://www.ardanlabs.com/blog/2014/01/concurrency-goroutines-and-gomaxprocs.html
http://morsmachine.dk/go-scheduler
https://www.ardanlabs.com/blog/2015/02/scheduler-tracing-in-go.html
https://www.ardanlabs.com/blog/2013/09/detecting-race-conditions-with-go.html

Canales

https://tour.golang.org/concurrency/2
https://tour.golang.org/concurrency/3
https://tour.golang.org/concurrency/4
https://tour.golang.org/concurrency/5
https://tour.golang.org/concurrency/6

https://golang.org/doc/codewalk/sharemem/

Patrones
--------

Generator:

Una funci√≥n que retorna un canal.

https://youtu.be/f6kdp27TYZs?t=14m28s

Multiplexing o FanIn

https://youtu.be/f6kdp27TYZs?t=16m58s

Synced multiplexing

https://youtu.be/f6kdp27TYZs?t=18m28s

Modularizaci√≥n
==============

.. Printf
.. File I/O

.. 5. Entrada y salida de datos
.. 12. Manejo de archivos
..     .1. Modos
..     .2. M√©todos y atributos
..     .3. Estructura "with"
.. 13. Programaci√≥n modular
..     .1. M√≥dulos predefinidos
..         .1. Expresiones regulares (re)
.. 15. Almacenamiento
..     .1. Archivos
..         .1. Binarios
..     .2. Bases de datos

https://tour.golang.org/basics/2
https://tour.golang.org/basics/3

Biblioteca est√°ndar
-------------------

https://vimeo.com/53221558
https://golang.org/doc/articles/wiki/

``fmt.Stringer``

https://tour.golang.org/methods/17

``io.Reader``

https://tour.golang.org/methods/21

Palabras reservadas
===================

``type``

``range``

https://tour.golang.org/moretypes/16
https://tour.golang.org/moretypes/17

Utilidades excluidas
====================

https://www.youtube.com/watch?v=k9Zbuuo51go

Desinstalaci√≥n
==============

Para desinstalarlo es suficiente con eliminar la carpeta de Go y los enlaces
simb√≥licos a sus binarios

.. code:: shell-session

    # rm -r /usr/local/go /usr/bin/go{,doc,fmt}

Atribuciones
============

Escribiendo este art√≠culo uso/us√©:

__ `Docker site`_

* `Debian <https://www.debian.org/>`_

* `XFCE <https://xfce.org/>`_

* `Terminator <https://gnometerminator.blogspot.com/p/introduction.html>`_

* `st <https://st.suckless.org/>`_

* `Zsh <http://www.zsh.org/>`_

* `GNU Screen <https://www.gnu.org/software/screen/>`_

* `Sublime Text 3 <https://www.sublimetext.com/3>`_

* `NtDocutils <https://ntrrg.github.io/NtDocutils/>`_

* `Chrome <https://www.google.com/chrome/browser/desktop/index.html>`_

* Docker__

**Go Team.** *The Go Programming Language.* https://golang.org/

**Ariel Mashraki.** *An overview of Go syntax and features.* https://github.com/a8m/go-lang-cheat-sheet

.. _Docker site: https://docker.com
